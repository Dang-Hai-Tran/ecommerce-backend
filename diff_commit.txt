diff --git a/api/models/__init__.py b/api/models/__init__.py
index ba81ce2..848d767 100644
--- a/api/models/__init__.py
+++ b/api/models/__init__.py
@@ -1,3 +1,4 @@
 from .user_model import UserModel
 from .token_model import TokenModel
 from .product_model import ProductModel
+from .inventory_model import InventoryModel
diff --git a/api/models/product_model.py b/api/models/product_model.py
index fff12b7..530b56f 100644
--- a/api/models/product_model.py
+++ b/api/models/product_model.py
@@ -4,6 +4,8 @@ from django.utils.text import slugify
 from django.core.validators import MinValueValidator, MaxValueValidator
 from decimal import Decimal
 
+from api.models.user_model import UserModel
+
 
 class ProductModel(models.Model):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
@@ -13,7 +15,7 @@ class ProductModel(models.Model):
     product_thumbnail = models.CharField(max_length=255)
     product_price = models.DecimalField(max_digits=10, decimal_places=2)
     product_quantity = models.IntegerField()
-    product_seller = models.ForeignKey("UserModel", on_delete=models.CASCADE)
+    product_seller = models.ForeignKey(UserModel, on_delete=models.CASCADE)
     category_choices = (
         ("Electronics", "Electronics"),
         ("Furniture", "Furniture"),
diff --git a/api/models/token_model.py b/api/models/token_model.py
index 5a33583..53923df 100644
--- a/api/models/token_model.py
+++ b/api/models/token_model.py
@@ -3,11 +3,13 @@ import uuid
 from django.db import models
 from api.utils.token import JwtToken
 
+from api.models.user_model import UserModel
+
 
 class TokenModel(models.Model):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
     token = models.CharField(unique=True)
-    user = models.ForeignKey("UserModel", on_delete=models.CASCADE)
+    user = models.ForeignKey(UserModel, on_delete=models.CASCADE)
     isActive = models.BooleanField(default=True)
     isExpired = models.BooleanField(default=False)
     expired_at = models.DateTimeField(blank=True, null=True)
diff --git a/api/services/product_service.py b/api/services/product_service.py
index abb71b6..a7df4cf 100644
--- a/api/services/product_service.py
+++ b/api/services/product_service.py
@@ -1,6 +1,7 @@
 from api.errors.bad_request import BadRequest
 from api.models.product_model import ProductModel
 from django.contrib.postgres.search import SearchVector, SearchQuery
+from api.services.inventory_service import InventoryService
 
 
 class ProductService:
@@ -14,10 +15,10 @@ class ProductService:
         product_seller,
         product_category,
         attributes,
-        product_rating,
         product_variations,
         is_draft,
         is_published,
+        product_rating = 4.5,
         product_slug=None,
     ):
         self.product_name = product_name
@@ -35,7 +36,14 @@ class ProductService:
         self.is_published = is_published
 
     def create_product(self):
-        return ProductModel.objects.create(**self.__dict__)
+        product = ProductModel.objects.create(**self.__dict__)
+        inventory = InventoryService(
+            product_id=product.id,
+            stock=product.product_quantity,
+            seller_id=product.product_seller.id,
+            location="unknown",
+        ).create_inventory()
+        return product
 
     @staticmethod
     def find_all_draft_products(limit=10, page=1):
diff --git a/api/services/user_service.py b/api/services/user_service.py
index 6d5acec..068b93e 100644
--- a/api/services/user_service.py
+++ b/api/services/user_service.py
@@ -4,7 +4,7 @@ from api.utils.hash import Hash
 
 class UserService:
     @staticmethod
-    def createUser(username, email, password):
+    def create_user(username, email, password):
         # Create user in database
         user = UserModel.objects.create(
             username=username, email=email, password=Hash.hash(password)
@@ -12,19 +12,19 @@ class UserService:
         return user
 
     @staticmethod
-    def getUserByUsername(username: str):
+    def find_user_by_username(username: str):
         # Get user by username
         user = UserModel.objects.get(username=username)
         return user
 
     @staticmethod
-    def getUserById(userId: str):
+    def find_user_by_id(userId: str):
         # Get user by id
         user = UserModel.objects.get(id=userId)
         return user
 
     @staticmethod
-    def updateUserPassword(userId: str, password: str):
+    def update_user_password(userId: str, password: str):
         # Update user password
         user = UserModel.objects.get(id=userId)
         if user:
diff --git a/api/views/token_view.py b/api/views/token_view.py
index 470a73e..5b3eae3 100644
--- a/api/views/token_view.py
+++ b/api/views/token_view.py
@@ -1,16 +1,16 @@
-from api.services.token_service import TokenService
-from rest_framework import viewsets
+from rest_framework import status, viewsets
+from rest_framework.decorators import action
+from rest_framework.permissions import AllowAny, IsAuthenticated
 from rest_framework.response import Response
-from rest_framework import status
-from api.models.token_model import TokenModel
-from api.serializers.token_serializer import TokenSerializer
-from rest_framework.permissions import IsAuthenticated, AllowAny
+
 from api.errors.bad_request import BadRequest
 from api.errors.not_found import NotFound
-from rest_framework.decorators import action
+from api.models.token_model import TokenModel
+from api.serializers.token_serializer import TokenSerializer
+from api.services.token_service import TokenService
 from api.services.user_service import UserService
-from api.utils.hash import Hash
 from api.utils.cipher import HSACipher
+from api.utils.hash import Hash
 from backend.settings import logger
 
 
@@ -24,10 +24,13 @@ class TokenViewSet(viewsets.ViewSet):
         try:
             username = request.data.get("username")
             password = request.data.get("password")
-            user = UserService.getUserByUsername(username)
+            user = UserService.find_user_by_username(username)
             if user and Hash.checkHash(password, user.password):
                 token = TokenService.createToken(user.id)
-                return Response({"access": HSACipher.decrypt(token.token)}, status=status.HTTP_200_OK)
+                return Response(
+                    {"access": HSACipher.decrypt(token.token)},
+                    status=status.HTTP_200_OK,
+                )
             else:
                 raise NotFound()
         except Exception as e:
diff --git a/api/views/user_view.py b/api/views/user_view.py
index 871aa31..270d895 100644
--- a/api/views/user_view.py
+++ b/api/views/user_view.py
@@ -1,17 +1,17 @@
+from django.utils import timezone
 from rest_framework import status, viewsets
+from rest_framework.decorators import action
+from rest_framework.permissions import AllowAny, IsAdminUser, IsAuthenticated
 from rest_framework.response import Response
 
 from api.errors.bad_request import BadRequest
 from api.errors.not_found import NotFound
-from api.models import UserModel, TokenModel
+from api.models import TokenModel, UserModel
 from api.serializers.user_serializer import UserSerializer
 from api.services.token_service import TokenService
 from api.services.user_service import UserService
-from rest_framework.decorators import action
-from rest_framework.permissions import IsAuthenticated, AllowAny, IsAdminUser
-from django.utils import timezone
-from api.utils.hash import Hash
 from api.utils.cipher import HSACipher
+from api.utils.hash import Hash
 from backend.settings import logger
 
 
@@ -28,7 +28,7 @@ class UserViewSet(viewsets.ViewSet):
             username = request.data.get("username")
             email = request.data.get("email")
             password = request.data.get("password")
-            user = UserService.createUser(username, email, password)
+            user = UserService.create_user(username, email, password)
             serializer = UserSerializer(user)
             return Response(serializer.data, status=status.HTTP_201_CREATED)
         except Exception as e:
@@ -40,7 +40,7 @@ class UserViewSet(viewsets.ViewSet):
         try:
             username = request.data.get("username")
             password = request.data.get("password")
-            user = UserService.getUserByUsername(username)
+            user = UserService.find_user_by_username(username)
             if user and Hash.checkHash(password, user.password):
                 user.last_login = timezone.now()
                 user.save()
diff --git a/backend/urls.py b/backend/urls.py
index 8377be5..386d273 100644
--- a/backend/urls.py
+++ b/backend/urls.py
@@ -24,4 +24,5 @@ urlpatterns = [
     path("api/v1/", include("api.urls.user_url")),
     path("api/v1/", include("api.urls.token_url")),
     path("api/v1/", include("api.urls.product_url")),
+    path("api/v1/", include("api.urls.inventory_url")),
 ]
